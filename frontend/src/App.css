/* Below are all the tricks I use to let react have full access to the browser window */
*{
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
body{
  /* height: 100vh; */
  width: 100vw;
}
#root{
  height: 100%;
  width: 100%;
}
/* I can add red-text as a class name and it will make the text color red */
.red-text{
  color: red;
}

.form-view{
  height: 100vh;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-evenly;
}
.form-view > div {
  width: 80%;
}
.form-view > #confirm-view{
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-evenly;
}

/* Here is where the main CSS code goes */
/* *** App *** */

.view-container{
  height: 100%;
  width: 100%;

  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
}
.title-text{
  color: green;
  font-weight: bold;
  font-size: 2em;
}

.view-container > div {
  text-align: center;
  width: 80%
}

.view-container > .title-holder > h2 {
  padding: 10pt 10pt;
}
/* targets the intro text p tags */
.view-container > .intro-text > p {
  padding: 15pt 15pt;
  
}
/* targets headers within divs */
.view-container > div > div > h2 {
  padding: 10pt 15pt;
}
/* targets all p tags within divs */
.view-container > div > div > p {
  padding: 15pt 15pt;
}

  #user-form{
  display: flex;
  flex-direction: column;

}

/* FormUserDetails */

.first.button-flex{
  width: 80%;
  height: 8rem;

  display: flex;
  justify-content: center;
  align-items: center;
}

/* FormPersonalDetails */

.button-flex{
  width: 80%;
  height: 8rem;
  display: flex;
  align-items: center;
  justify-content: space-around;
  

}





